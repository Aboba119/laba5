import time
import matplotlib.pyplot as plt


def recursive_f(n):
    if n == 1:
        return 1
    sign = (-1) ** n
    return sign * (recursive_f(n - 1) - 2 * recursive_g(n - 1))


def recursive_g(n):
    if n == 1:
        return 1
    return factorial_recursive(n - 1) - recursive_f(n - 1)


def factorial_recursive(n):
    if n == 0 or n == 1:
        return 1
    return n * factorial_recursive(n - 1)


def iterative_f(n):
    if n == 1:
        return 1
    f_prev, g_prev = 1, 1
    fact = 1
    for i in range(2, n + 1):
        sign = (-1) ** i
        fact *= (i - 1)
        f_current = sign * (f_prev - 2 * g_prev)
        g_current = fact - f_prev
        f_prev, g_prev = f_current, g_current
    return f_prev


def main():
    n = -1
    while n < 1:
        n = int(input("Введите натуральное число от 1: "))

    step = -1
    while step < 1:
        step = int(input("Введите шаг графика от 1: "))

    k = -1
    while k not in {0, 1, 2}:
        k = int(input("Выберите режим работы (0-рекурсия, 1-итерация, 2-оба): "))

    if (n >= 33 and k in {0, 2}) or (n >= 5000 and k in {1, 2}):
        ans = -1
        while ans not in {0, 1}:
            ans = int(input("Работа программы может занять большое время. Продолжить? (1=да, 0=нет): "))
        if ans == 0:
            return

    x_values = list(range(1, n + 1, step))
    recursive_times = []
    iterative_times = []

    if k in {0, 2}:
        for x in x_values:
            start = time.time()
            result = recursive_f(x)
            end = time.time()
            recursive_times.append(end - start)
            print(f"n={x}, Рекурсия: результат={result}, время={end - start:.6f} сек")

    if k in {1, 2}:
        for x in x_values:
            start = time.time()
            result = iterative_f(x)
            end = time.time()
            iterative_times.append(end - start)
            print(f"n={x}, Итерация: результат={result}, время={end - start:.6f} сек")

    plt.figure(figsize=(10, 6))
    if k in {0, 2}:
        plt.plot(x_values, recursive_times, label='Рекурсивный метод')
    if k in {1, 2}:
        plt.plot(x_values, iterative_times, label='Итерационный метод')

    plt.xlabel('Значение n')
    plt.ylabel('Время выполнения (сек)')
    plt.title('Сравнение рекурсивного и итерационного методов')
    plt.legend()
    plt.grid(True)
    plt.show()


if __name__ == "__main__":
    main()
